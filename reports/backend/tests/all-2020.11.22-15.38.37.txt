============================= test session starts ==============================
platform darwin -- Python 3.8.6, pytest-6.1.2, py-1.9.0, pluggy-0.13.1 -- /Users/riddhiman/Desktop/SoftwareEngineering/KERMit/server/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/riddhiman/Desktop/SoftwareEngineering/KERMit
plugins: mock-3.3.1
collecting ... collected 132 items

server/tests/integration/test_authentication.py::test_registration_missing_header ERROR [  0%]
server/tests/integration/test_authentication.py::test_registration_malformed_header ERROR [  1%]
server/tests/integration/test_authentication.py::test_registration_verification_token_invalid ERROR [  2%]
server/tests/integration/test_authentication.py::test_registration_user_info_error ERROR [  3%]
server/tests/integration/test_authentication.py::test_register_token_valid_missing_info1 ERROR [  3%]
server/tests/integration/test_authentication.py::test_register_token_valid_missing_info2 ERROR [  4%]
server/tests/integration/test_authentication.py::test_registration_user_id_already_exists ERROR [  5%]
server/tests/integration/test_authentication.py::test_successful_user_registration ERROR [  6%]
server/tests/integration/test_leaderboard.py::test_get_leaders_no_completed_puzzle ERROR [  6%]
server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles ERROR [  7%]
server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles_limit2 ERROR [  8%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration ERROR [  9%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles ERROR [  9%]
server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle ERROR [ 10%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid ERROR [ 11%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small ERROR [ 12%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large ERROR [ 12%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large ERROR [ 13%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small ERROR [ 14%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user ERROR [ 15%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid ERROR [ 15%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle ERROR [ 16%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle ERROR [ 17%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist ERROR [ 18%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid ERROR [ 18%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached ERROR [ 19%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet ERROR [ 20%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value ERROR [ 21%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_player_is_not_affiliated_with ERROR [ 21%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low ERROR [ 22%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high ERROR [ 23%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high ERROR [ 24%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_piece ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_static_piece ERROR [ 26%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete ERROR [ 27%]
server/tests/unit/test_authentication.py::test_authorize_token_missing_header PASSED [ 28%]
server/tests/unit/test_authentication.py::test_authorize_token_missing_header2 PASSED [ 28%]
server/tests/unit/test_authentication.py::test_authorize_token_malformed_header PASSED [ 29%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_error PASSED [ 30%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_success_register PASSED [ 31%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_success PASSED [ 31%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_not_registered PASSED [ 32%]
server/tests/unit/test_authentication.py::test_register PASSED           [ 33%]
server/tests/unit/test_authentication.py::test_register_missing_info_email PASSED [ 34%]
server/tests/unit/test_authentication.py::test_register_missing_info_id PASSED [ 34%]
server/tests/unit/test_authentication.py::test_register_error_googleauth PASSED [ 35%]
server/tests/unit/test_authentication.py::test_register_exception PASSED [ 36%]
server/tests/unit/test_authentication.py::test_register_no_user_yet PASSED [ 37%]
server/tests/unit/test_authentication.py::test_register_exception_db PASSED [ 37%]
server/tests/unit/test_google_auth.py::test_validate_token PASSED        [ 38%]
server/tests/unit/test_google_auth.py::test_get_user_information PASSED  [ 39%]
server/tests/unit/test_leaderboard.py::test_get_leaderboard_no_leaders PASSED [ 40%]
server/tests/unit/test_leaderboard.py::test_get_leaderboard PASSED       [ 40%]
server/tests/unit/test_player.py::test_save_commit PASSED                [ 41%]
server/tests/unit/test_player.py::test_save PASSED                       [ 42%]
server/tests/unit/test_player.py::test_find_all_puzzles_for_player PASSED [ 43%]
server/tests/unit/test_player.py::test_find_players_for_puzzle PASSED    [ 43%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_already_too_many_players PASSED [ 44%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_player_doesnt_exist PASSED [ 45%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_ok PASSED    [ 46%]
server/tests/unit/test_player.py::test_to_player_to_str PASSED           [ 46%]
server/tests/unit/test_puzzle_exception.py::test_get_message PASSED      [ 47%]
server/tests/unit/test_puzzle_pieces.py::test_find_all_pieces PASSED     [ 48%]
server/tests/unit/test_puzzle_pieces.py::test_get_piece PASSED           [ 49%]
server/tests/unit/test_puzzle_pieces.py::test_get_piece_none PASSED      [ 50%]
server/tests/unit/test_puzzle_pieces.py::test_save_autocommit PASSED     [ 50%]
server/tests/unit/test_puzzle_pieces.py::test_save PASSED                [ 51%]
server/tests/unit/test_puzzle_pieces.py::test_update_success PASSED      [ 52%]
server/tests/unit/test_puzzle_pieces.py::test_update_fail_static PASSED  [ 53%]
server/tests/unit/test_puzzle_pieces.py::test_get_as_str PASSED          [ 53%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_defaults PASSED [ 54%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_specification PASSED [ 55%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_str PASSED [ 56%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_too_low PASSED [ 56%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_too_high PASSED [ 57%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_str PASSED [ 58%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_too_low PASSED [ 59%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_too_high PASSED [ 59%]
server/tests/unit/test_sudoku_puzzle.py::test_set_point_value1 PASSED    [ 60%]
server/tests/unit/test_sudoku_puzzle.py::test_set_point_value2 PASSED    [ 61%]
server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_all PASSED [ 62%]
server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_static_only PASSED [ 62%]
server/tests/unit/test_sudoku_puzzle.py::test_recreate_original_puzzle PASSED [ 63%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_null_values PASSED [ 64%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_complete PASSED [ 65%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_incorrect_values PASSED [ 65%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_none PASSED [ 66%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_many_incorrect PASSED [ 67%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_incomplete_puzzle PASSED [ 68%]
server/tests/unit/test_sudoku_puzzle.py::test_get_puzzle_none PASSED     [ 68%]
server/tests/unit/test_sudoku_puzzle.py::test_get_puzzle_found PASSED    [ 69%]
server/tests/unit/test_sudoku_puzzle.py::test_save PASSED                [ 70%]
server/tests/unit/test_sudoku_puzzle.py::test_save_autocommit PASSED     [ 71%]
server/tests/unit/test_sudoku_puzzle.py::test_attempt_update_complete_puzzle PASSED [ 71%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate1 PASSED [ 72%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate2 PASSED [ 73%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate3 PASSED [ 74%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate4 PASSED [ 75%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value1 PASSED [ 75%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value2 PASSED [ 76%]
server/tests/unit/test_sudoku_puzzle.py::test_update_valid PASSED        [ 77%]
server/tests/unit/test_sudoku_puzzle.py::test_update_valid_complete_puzzle PASSED [ 78%]
server/tests/unit/test_sudoku_puzzle.py::test_set_puzzle_complete PASSED [ 78%]
server/tests/unit/test_sudoku_puzzle.py::test_as_str PASSED              [ 79%]
server/tests/unit/test_sudoku_resources.py::test_sudoku_to_json PASSED   [ 80%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_none PASSED [ 81%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_all PASSED [ 81%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one_known_exception PASSED [ 82%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one_unknown_exception PASSED [ 83%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one PASSED [ 84%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_none_retrieved PASSED [ 84%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_none_associated PASSED [ 85%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_found PASSED [ 86%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_already_joined PASSED [ 87%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle PASSED [ 87%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_known_exception PASSED [ 88%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_unknown_exception PASSED [ 89%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_not_associated PASSED [ 90%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move PASSED [ 90%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_invalid PASSED [ 91%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_exception PASSED [ 92%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece PASSED [ 93%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece_invalid PASSED [ 93%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution_not_associated PASSED [ 94%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution_not_associated_2 PASSED [ 95%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution PASSED [ 96%]
server/tests/unit/test_user.py::test_create_user PASSED                  [ 96%]
server/tests/unit/test_user.py::test_user_as_str PASSED                  [ 97%]
server/tests/unit/test_user.py::test_user_print PASSED                   [ 98%]
server/tests/unit/test_user.py::test_user_save PASSED                    [ 99%]
server/tests/unit/test_user.py::test_find_by_g_id PASSED                 [100%]

==================================== ERRORS ====================================
______________ ERROR at setup of test_registration_missing_header ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_____________ ERROR at setup of test_registration_malformed_header _____________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_registration_verification_token_invalid ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_____________ ERROR at setup of test_registration_user_info_error ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_register_token_valid_missing_info1 ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_register_token_valid_missing_info2 ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_registration_user_id_already_exists __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_____________ ERROR at setup of test_successful_user_registration ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
____________ ERROR at setup of test_get_leaders_no_completed_puzzle ____________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_____________ ERROR at setup of test_get_leaders_completed_puzzles _____________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________ ERROR at setup of test_get_leaders_completed_puzzles_limit2 __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______ ERROR at setup of test_attempt_to_use_game_without_registration ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
______________ ERROR at setup of test_get_all_puzzles_no_puzzles _______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________________ ERROR at setup of test_get_nonexistent_puzzle _________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________________ ERROR at setup of test_save_new_puzzle_valid _________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_small ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_large ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_large ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_small ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______________ ERROR at setup of test_get_all_puzzles_for_user ________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
___________________ ERROR at setup of test_get_puzzle_valid ____________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_attempt_to_get_unaffiliated_puzzle ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_already_in_puzzle ___

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_that_doesnt_exist ___

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________ ERROR at setup of test_attempt_to_add_player_to_puzzle_valid _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
______ ERROR at setup of test_attempt_to_join_puzzle_max_players_reached _______

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________ ERROR at setup of test_attempt_add_piece_valid_no_value_yet __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_attempt_add_piece_valid_override_value _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
____ ERROR at setup of test_attempt_add_piece_player_is_not_affiliated_with ____

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_attempt_add_piece_invalid_piece_low __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________ ERROR at setup of test_attempt_add_piece_invalid_piece_high __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_attempt_add_piece_invalid_position_high ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_attempt_add_piece_invalid_position_low _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________________ ERROR at setup of test_attempt_remove_piece __________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
______________ ERROR at setup of test_attempt_remove_static_piece ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
____________ ERROR at setup of test_get_puzzle_solution_incomplete _____________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x1093cf8e0>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
=========================== short test summary info ============================
ERROR server/tests/integration/test_authentication.py::test_registration_missing_header
ERROR server/tests/integration/test_authentication.py::test_registration_malformed_header
ERROR server/tests/integration/test_authentication.py::test_registration_verification_token_invalid
ERROR server/tests/integration/test_authentication.py::test_registration_user_info_error
ERROR server/tests/integration/test_authentication.py::test_register_token_valid_missing_info1
ERROR server/tests/integration/test_authentication.py::test_register_token_valid_missing_info2
ERROR server/tests/integration/test_authentication.py::test_registration_user_id_already_exists
ERROR server/tests/integration/test_authentication.py::test_successful_user_registration
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_no_completed_puzzle
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles_limit2
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_player_is_not_affiliated_with
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_piece
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_static_piece
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete
======================== 96 passed, 36 errors in 26.99s ========================
